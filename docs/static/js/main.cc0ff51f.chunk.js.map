{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","responseJSON","console","log","GifGridItem","className","src","alt","GifGrid","Fragment","style","color","fontWeight","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"oNA+BeA,EA5BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAazC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAfe,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,+BCYtCG,EAlBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UACpDH,GAFY,+DAISI,MAAMF,GAJf,cAIRG,EAJQ,gBAKSA,EAASC,OALlB,uBAKNC,EALM,EAKNA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAePM,GAfO,4CAAH,sDC0BEO,EAvBM,SAACf,GAAc,IAAD,EACPd,mBAAS,CACjCqB,KAAM,GACNS,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAoBjC,OAdAC,qBAAU,WAIR,sBAAC,4BAAAlB,EAAA,sEAC4BF,EAAQC,GADpC,OACOoB,EADP,OAECC,QAAQC,IAAI,OACZJ,EAAS,CACPX,KAAK,YAAKa,GACVJ,SAAS,IALZ,0CAAD,KAQC,CAAChB,IAEGiB,GCXMM,EAVK,SAAC,GAAqB,EAApBZ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE/B,OACE,sBAAKsB,UAAU,yCAAf,UACE,qBAAKC,IAAKvB,EAAKwB,IAAKd,IACpB,4BAAIA,QCuBKe,EA1BC,SAAC,GAAkB,IAAhB3B,EAAe,EAAfA,SAAe,EACEe,EAAaf,GAAjCa,EADkB,EACxBN,KAAcS,EADU,EACVA,QAEtB,OACE,eAAC,IAAMY,SAAP,WACE,6BAAK5B,IACJgB,EACC,mBACEa,MAAO,CACLC,MAAO,MACPC,WAAY,QAHhB,yBASA,qBAAKP,UAAU,YAAf,SACGX,EAAOJ,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aClB5BqB,EAAe,WAAO,IAAD,EACI9C,mBAAS,CAAC,cADd,mBACzBQ,EADyB,KACbT,EADa,KAGhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGS,EAAWe,KAAI,SAACT,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCP/BiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cc0ff51f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleChange = (e) => setInputValue(e.target.value);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((categories) => [inputValue, ...categories]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type='text'\r\n        value={inputValue}\r\n        onChange={handleChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=LYziF8qyDulQaMRzNuygzTg2ARcEfK8m`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n\r\nexport default getGifs;","import { useEffect, useState } from 'react';\r\nimport getGifs from '../helpers/getGifs';\r\n\r\nconst useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // getGifs(category).then((data) => {\r\n    //   setState({ data: [...data], loading: false });\r\n    // });\r\n    (async () => {\r\n      const responseJSON = await getGifs(category);\r\n      console.log('hey');\r\n      setState({\r\n        data: [...responseJSON],\r\n        loading: false,\r\n      });\r\n    })();\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n  \r\n  return (\r\n    <div className='card animate__animated animate__zoomIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react';\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h3>{category}</h3>\r\n      {loading ? (\r\n        <p\r\n          style={{\r\n            color: 'red',\r\n            fontWeight: 'bold',\r\n          }}\r\n        >\r\n          Cargando...\r\n        </p>\r\n      ) : (\r\n        <div className='card-grid'>\r\n          {images.map((img) => {\r\n            return <GifGridItem key={img.id} {...img} />;\r\n          })}\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n// LYziF8qyDulQaMRzNuygzTg2ARcEfK8m;\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}